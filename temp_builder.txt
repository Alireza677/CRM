@php
    $models = config('reports.models');
    $initial = old('query_json', $report->query_json ?? [ 'model' => null, 'selects' => [], 'filters' => [], 'group_by' => [], 'aggregates' => [], 'sorts' => [], 'limit' => 15, 'page' => 1 ]);
@endphp

<div x-data="reportBuilder()" x-init="init(@js($models), @js($initial))" class="space-y-4" dir="rtl">
    <input type="hidden" name="query_json" :value="jsonString">

    <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
        <div>
            <label class="block mb-1">مدل</label>
            <select x-model="state.model" @change="onModelChange" class="w-full border rounded p-2">
                <option value="">— انتخاب مدل —</option>
                @foreach($models as $key => $cfg)
                    <option value="{{ $key }}">{{ $key }}</option>
                @endforeach
            </select>
        </div>
        <div class="md:col-span-2">
            <label class="block mb-1">ستون‌ها (Select)</label>
            <select multiple x-model="state.selects" class="w-full border rounded p-2 min-h-12">
                <template x-for="(type, field) in fields()" :key="field">
                    <option :value="field" x-text="field"></option>
                </template>
            </select>
        </div>
    </div>

    <div>
        <div class="flex items-center justify-between mb-2">
            <label class="font-semibold">فیلترها</label>
            <button type="button" @click="addFilter" class="px-2 py-1 text-sm bg-gray-100 rounded">افزودن</button>
        </div>
        <div class="space-y-2">
            <template x-for="(f, idx) in state.filters" :key="idx">
                <div class="grid grid-cols-1 md:grid-cols-4 gap-2 items-center">
                    <select x-model="f.field" class="border rounded p-2">
                        <option value="">فیلد</option>
                        <template x-for="(type, field) in fields()" :key="field">
                            <option :value="field" x-text="field"></option>
                        </template>
                    </select>
                    <select x-model="f.operator" class="border rounded p-2">
                        <option value="">اپراتور</option>
                        <template x-if="f.field">
                            <template x-for="op in operatorsFor(f.field)" :key="op">
                                <option :value="op" x-text="op"></option>
                            </template>
                        </template>
                    </select>
                    <input type="text" x-model="f.value" class="border rounded p-2" placeholder="مقدار (برای in/between با , جدا کنید)">
                    <button type="button" @click="removeFilter(idx)" class="px-2 py-1 bg-red-100 text-red-700 rounded">حذف</button>
                </div>
            </template>
        </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
        <div>
            <label class="block mb-1">Group By</label>
            <select multiple x-model="state.group_by" class="w-full border rounded p-2">
                <template x-for="(type, field) in fields()" :key="field">
                    <option :value="field" x-text="field"></option>
                </template>
            </select>
        </div>
        <div class="md:col-span-2">
            <label class="block mb-1">Aggregates</label>
            <div class="space-y-2">
                <template x-for="(ag, idx) in state.aggregates" :key="idx">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-2 items-center">
                        <select x-model="ag.fn" class="border rounded p-2">
                            <template x-for="fn in aggFns" :key="fn">
                                <option :value="fn" x-text="fn"></option>
                            </template>
                        </select>
                        <select x-model="ag.field" class="border rounded p-2">
                            <option value="">*</option>
                            <template x-for="(type, field) in fields()" :key="field">
                                <option :value="field" x-text="field"></option>
                            </template>
                        </select>
                        <input type="text" x-model="ag.as" class="border rounded p-2" placeholder="نام مستعار (اختیاری)">
                        <button type="button" @click="removeAggregate(idx)" class="px-2 py-1 bg-red-100 text-red-700 rounded">حذف</button>
                    </div>
                </template>
                <button type="button" @click="addAggregate" class="px-2 py-1 text-sm bg-gray-100 rounded">افزودن Aggregate</button>
            </div>
        </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
        <div>
            <label class="block mb-1">مرتب‌سازی</label>
            <div class="space-y-2">
                <template x-for="(s, idx) in state.sorts" :key="idx">
                    <div class="grid grid-cols-2 gap-2">
                        <select x-model="s.field" class="border rounded p-2">
                            <template x-for="(type, field) in fields()" :key="field">
                                <option :value="field" x-text="field"></option>
                            </template>
                        </select>
                        <select x-model="s.dir" class="border rounded p-2">
                            <option value="asc">صعودی</option>
                            <option value="desc">نزولی</option>
                        </select>
                    </div>
                </template>
                <button type="button" @click="addSort" class="px-2 py-1 text-sm bg-gray-100 rounded">افزودن مرتب‌سازی</button>
            </div>
        </div>
        <div>
            <label class="block mb-1">Limit</label>
            <input type="number" min="1" max="200" x-model.number="state.limit" class="w-full border rounded p-2">
        </div>
        <div class="flex items-end">
            <button type="button" @click="preview" class="px-4 py-2 bg-blue-600 text-white rounded">پیش‌نمایش</button>
        </div>
    </div>

    <div x-show="previewData" class="bg-white rounded shadow p-3">
        <template x-if="previewError">
            <div class="text-red-600" x-text="previewError"></div>
        </template>
        <template x-if="!previewError && previewData">
            <div>
                <div class="mb-2 text-sm text-gray-600">نتایج (زمان اجرا: <span x-text="(previewData.meta?.exec_ms || 0) + 'ms'"></span>)</div>
                <div class="overflow-auto">
                    <table class="min-w-full text-right">
                        <thead>
                        <tr>
                            <template x-for="c in previewData.columns" :key="c">
                                <th class="px-2 py-1 bg-gray-50 border" x-text="c"></th>
                            </template>
                        </tr>
                        </thead>
                        <tbody>
                        <template x-for="(row, i) in previewData.rows" :key="i">
                            <tr class="border-b">
                                <template x-for="c in previewData.columns" :key="c">
                                    <td class="px-2 py-1" x-text="row[c]"></td>
                                </template>
                            </tr>
                        </template>
                        </tbody>
                    </table>
                </div>
                <template x-if="previewData.summary">
                    <div class="mt-3 p-2 bg-gray-50 rounded">
                        <div class="font-semibold mb-1">خلاصه</div>
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-2">
                            <template x-for="(v,k) in previewData.summary" :key="k">
                                <div><span class="text-gray-600" x-text="k + ':'"></span> <span x-text="v"></span></div>
                            </template>
                        </div>
                    </div>
                </template>
            </div>
        </template>
    </div>

    <script>
        function reportBuilder(){
            return {
                modelsCfg: {},
                state: { model: '', selects: [], filters: [], group_by: [], aggregates: [], sorts: [], limit: 15, page: 1 },
                aggFns: ['sum','avg','count','max','min'],
                jsonString: '',
                previewData: null,
                previewError: null,
                init(models, initial){ this.modelsCfg = models; this.state = Object.assign(this.state, initial||{}); this.refreshJson(); },
                fields(){ if (!this.state.model) return {}; return this.modelsCfg[this.state.model]?.fields || {}; },
                operatorsFor(field){ const type = this.fields()[field]; const ops = @js(config('reports.operators')); return ops[type] || []; },
                onModelChange(){ this.state.selects = []; this.state.filters = []; this.state.group_by = []; this.state.aggregates = []; this.state.sorts = []; this.refreshJson(); },
                addFilter(){ this.state.filters.push({field:'',operator:'',value:''}); this.refreshJson(); },
                removeFilter(i){ this.state.filters.splice(i,1); this.refreshJson(); },
                addAggregate(){ this.state.aggregates.push({fn:'count',field:'',as:''}); this.refreshJson(); },
                removeAggregate(i){ this.state.aggregates.splice(i,1); this.refreshJson(); },
                addSort(){ this.state.sorts.push({field:'id',dir:'desc'}); this.refreshJson(); },
                refreshJson(){ this.jsonString = JSON.stringify(this.state); },
                async preview(){
                    this.previewError = null; this.previewData = null; this.refreshJson();
                    try{
                        const resp = await fetch(@js(route('reports.preview')), { method:'POST', headers: { 'Content-Type':'application/json', 'X-CSRF-TOKEN': document.querySelector('meta[name=csrf-token]').getAttribute('content') }, body: JSON.stringify({ query_json: this.state }) });
                        const data = await resp.json();
                        if(!resp.ok){ this.previewError = data.message || 'خطا در پیش‌نمایش'; return; }
                        this.previewData = data;
                    }catch(e){ this.previewError = 'خطای شبکه/سرور'; }
                },
                $watch: { state: { deep: true, handler(){ this.refreshJson(); } } }
            }
        }
    </script>
</div>

